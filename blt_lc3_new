.orig x3000 
; detect letter x or negative or not
enter_number
and r0,r0,#0
and r1,r1,#0
and r2,r2,#0
and r3,r3,#0
and r4,r4,#0
in 
ld r1,x
not r1,r1
add r1,r1,#1
ld r2,minus
not r2,r2
add r2,r2,#1
add r1,r0,r1
brz hexa
add r2,r0,r2
brz negative
; jump to case hexa or negative
;clear mem
and r1,r1,#0 
and r2,r2,#0
and r3,r3,#0
add r3,r3,#13
ld r1,mem
loop_clear_mem
str r2,r1,#0
add r1,r1,#1
add r3,r3,#-1
brzp loop_clear_mem
;decimal
; input 1st, 
and r1,r1,#0
add r1,r0,#-15
add r1,r1,#-15
add r1,r1,#-15
add r1,r1,#-3
; check charater is valid ? 
add r4,r1,#-10
brn skip_a
and r0,r0,#0
lea r0, message
puts
brnzp enter_number
skip_a
;input 2nd
in 
and r2,r2,#0
add r2,r0,#-15
add r2,r2,#-15
add r2,r2,#-15
add r2,r2,#-3
and r3,r3,#0
add r4,r2,#-10
brn skip_b
and r0,r0,#0
lea r0, message
puts
brnzp enter_number
skip_b
;input 3rd
in 
and r3,r3,#0 
add r3,r0,#-15
add r3,r3,#-15
add r3,r3,#-15
add r3,r3,#-3
and r4,r4,#0
add r4,r3,#-10
brn skip_c
and r0,r0,#0
lea r0, message
puts
brnzp enter_number
skip_c
and r4,r4,#0 
add r2,r2,#0 
brz if_b_zero
; 10r2+r3 = r4
loop_10b
add r4,r4,#10
add r2,r2,#-1
brp loop_10b
if_b_zero
add r4,r4,r3
;check r1 = 0 or not 
and r6,r6,#0 
add r1,r1,#0 
brz if_a_zero
; r6 = 100r1 + r4
and r5,r5,#0 
ld r5,onehundred
loop_100a
add r6,r6,r5
add r1,r1,#-1
brp loop_100a
if_a_zero
add r6,r6,r4
; convert decimal to binary 
; R6 store value of decimal 
converting
and r1,r1,#0 
and r2,r2,#0
ld r1,mem
loop_convert 
and r2,r2,#0
add r2,r2,#-1
loop_minus2
add r2,r2,#1 		
add r6,r6,#-2
brzp loop_minus2
add r6,r6,#2 		; r6 store residual 
str r6,r1,#0		; store residual into memory
add r1,r1,#1		; next address 
and r6,r6,#0 		; clear r6
add r6,r2,#0 		; r6 store interger part of division 
brnp loop_convert	; end until the result of division is 0
brnzp print


;nega
negative
and r0,r0,#0
and r1,r1,#0
and r2,r2,#0
and r3,r3,#0
and r4,r4,#0
and r5,r5,#0
; input 1st 
in 
add r1,r0,#-15
add r1,r1,#-15
add r1,r1,#-15
add r1,r1,#-3
and r4,r4,#0
add r4,r1,#-10
brn skip_a2
and r0,r0,#0
lea r0, message
puts
brnzp enter_number
skip_a2
and r0,r0,#0
;input 2nd
in 
add r2,r0,#-15
add r2,r2,#-15
add r2,r2,#-15
add r2,r2,#-3
and r4,r4,#0
add r4,r2,#-10
brn skip_b2
and r0,r0,#0
lea r0, message
puts
brnzp enter_number
skip_b2
;input 3rd 
in 
add r3,r0,#-15
add r3,r3,#-15
add r3,r3,#-15
add r3,r3,#-3
and r4,r4,#0
add r4,r3,#-10
brn skip_c2
and r0,r0,#0
lea r0, message
puts
brnzp enter_number
skip_c2
;check r2 = 0 or not
and r4,r4,#0 
add r2,r2,#0 
brz if_b_nega_zero
; 16r2+r3 = r4
add r5,r5,#10
loop_nega_b
add r4,r4,r5
add r2,r2,#-1
brp loop_nega_b
if_b_nega_zero
add r4,r4,r3
;check r1 = 0 or not 
and r6,r6,#0 
add r1,r1,#0 
brz if_a_nega_zero
; r6 = 100r1 + r4
and r5,r5,#0 
ld r5,onehundred
loop_nega_a
add r6,r6,r5
add r1,r1,#-1
brp loop_nega_a
if_a_nega_zero
add r6,r6,r4
not r6,r6
add r6,r6,#1
and r5,r5,#0 
ld r5,FFD
add r6,r6,r5

brnzp converting
;hexadecimal
hexa
and r0,r0,#0
and r1,r1,#0
and r2,r2,#0
and r3,r3,#0
and r4,r4,#0

; input 1st 
in 
add r1,r0,#-15
add r1,r1,#-15
add r1,r1,#-15
add r1,r1,#-3
add r4,r1,#-10
brzp convert_a
next_a
and r4,r4,#0
ld r4,sixteen
not r4,r4
add r4,r4,#1
add r4,r1,r4
brnz skip_a3
and r0,r0,#0
lea r0, message2
puts

brnzp enter_number
skip_a3
and r0,r0,#0
;input 2nd
in 
add r2,r0,#-15
add r2,r2,#-15
add r2,r2,#-15
add r2,r2,#-3
and r4,r4,#0
add r4,r2,#-10
brzp convert_b 
next_b
and r4,r4,#0
ld r4,sixteen
not r4,r4
add r4,r4,#1
add r4,r2,r4
brnz skip_b3
and r0,r0,#0
lea r0, message2
puts
brnzp enter_number
skip_b3
and r0,r0,#0 
;input 3rd 
in 
add r3,r0,#-15
add r3,r3,#-15
add r3,r3,#-15
add r3,r3,#-3
and r4,r4,#0 
add r4,r3,#-10
brzp convert_c 
next_c
and r4,r4,#0
ld r4,sixteen
not r4,r4
add r4,r4,#1
add r4,r3,r4
brnz skip_c3
and r0,r0,#0
lea r0, message2
puts
brnzp enter_number
skip_c3
;check r2 = 0 or not
and r4,r4,#0 
add r2,r2,#0 
brz if_b_hexa_zero
; 16r2+r3 = r4
ld r5, sixteen
loop_16b
add r4,r4,r5
add r2,r2,#-1
brp loop_16b
if_b_hexa_zero
add r4,r4,r3
;check r1 = 0 or not 
and r6,r6,#0 
add r1,r1,#0 
brz if_a_hexa_zero
; r6 = 256r1 + r4
and r5,r5,#0 
ld r5,hainamsau
loop_256a
add r6,r6,r5
add r1,r1,#-1
brp loop_256a
if_a_hexa_zero
add r6,r6,r4
brnzp converting
; 
;convert character to decimal 
convert_a
add r1,r1,#-7
brnzp next_a
convert_b
add r2,r2,#-7
brnzp next_b
convert_c
add r3,r3,#-7
brnzp next_c
;print
print
and r0,r0,#0 
and r1,r1,#0
and r2,r2,#0
and r3,r3,#0
lea r0, message3
puts
add r2,r2,#11
ld r1,mem_11
loop_print
ldr r3,r1,#0
add r3,r3,#15
add r3,r3,#15
add r3,r3,#15
add r3,r3,#3
add r0,r3,#0 
out 
add r1,r1,#-1
add r2,r2,#-1 
brzp loop_print
halt
x .fill x78 		
minus .fill x2D		
onehundred .fill x64
sixteen .fill x10
hainamsau .fill x100
FFD .fill x1000
mem .fill x3200
mem_11 .fill x320B
A .fill x41
message .stringz "Please enter number from 0-9 !"
message2 .stringz "Please enter number from 0-F !"
message3 .stringz "The result is: "
.end